import java.util.zip.ZipFile
import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'cpp'
    id 'maven-publish'
}

group = "net.derfruhling.discord"
version = "1.0-SNAPSHOT"

def socialSdkHeaders = tasks.register("socialSdkHeaders", Copy) {
    from(zipTree("discord-social-sdk.zip")) {
        include "discord_social_sdk/include/**"

        eachFile { f ->
            f.relativePath = new RelativePath(true, f.relativePath.segments.drop(1))
        }

        includeEmptyDirs = false
    }

    into "discord_social_sdk"
}

def socialSdkGrabLicense = tasks.register("socialSdkGrabLicense", Copy) {
    from(zipTree("discord-social-sdk.zip")) {
        include "discord_social_sdk/License-Notices.txt"

        eachFile { f ->
            f.relativePath = new RelativePath(true, f.relativePath.segments.drop(1))
        }

        includeEmptyDirs = false
    }

    into "discord_social_sdk"
}

def socialSdkWindowsReleaseBinaries = tasks.register("socialSdkWindowsReleaseBinaries", Copy) {
    from(zipTree("discord-social-sdk.zip")) {
        include "discord_social_sdk/bin/release/discord_partner_sdk.dll"
        include "discord_social_sdk/lib/release/discord_partner_sdk.lib"

        eachFile { f ->
            f.relativePath = new RelativePath(true, f.relativePath.segments.drop(1))
        }

        includeEmptyDirs = false
    }

    into "discord_social_sdk"
}

def socialSdkLinuxReleaseBinaries = tasks.register("socialSdkLinuxReleaseBinaries", Copy) {
    from(zipTree("discord-social-sdk.zip")) {
        include "discord_social_sdk/lib/release/libdiscord_partner_sdk.so"

        eachFile { f ->
            f.relativePath = new RelativePath(true, f.relativePath.segments.drop(1))
        }

        includeEmptyDirs = false
    }

    into "discord_social_sdk"
}

def socialSdkMacosReleaseBinaries = tasks.register("socialSdkMacosReleaseBinaries", Copy) {
    from(zipTree("discord-social-sdk.zip")) {
        include "discord_social_sdk/lib/release/libdiscord_partner_sdk.dylib"

        eachFile { f ->
            f.relativePath = new RelativePath(true, f.relativePath.segments.drop(1))
        }

        includeEmptyDirs = false
    }

    into "discord_social_sdk"
}

def socialSdkWindowsDebugBinaries = tasks.register("socialSdkWindowsDebugBinaries", Copy) {
    from(zipTree("discord-social-sdk.zip")) {
        include "discord_social_sdk/bin/debug/discord_partner_sdk.dll"
        include "discord_social_sdk/lib/debug/discord_partner_sdk.lib"

        eachFile { f ->
            f.relativePath = new RelativePath(true, f.relativePath.segments.drop(1))
        }

        includeEmptyDirs = false
    }

    into "discord_social_sdk"
}

def socialSdkLinuxDebugBinaries = tasks.register("socialSdkLinuxDebugBinaries", Copy) {
    from(zipTree("discord-social-sdk.zip")) {
        include "discord_social_sdk/lib/debug/libdiscord_partner_sdk.so"

        eachFile { f ->
            f.relativePath = new RelativePath(true, f.relativePath.segments.drop(1))
        }

        includeEmptyDirs = false
    }

    into "discord_social_sdk"
}

def socialSdkMacosDebugBinaries = tasks.register("socialSdkMacosDebugBinaries", Copy) {
    from(zipTree("discord-social-sdk.zip")) {
        include "discord_social_sdk/lib/debug/libdiscord_partner_sdk.dylib"

        eachFile { f ->
            f.relativePath = new RelativePath(true, f.relativePath.segments.drop(1))
        }

        includeEmptyDirs = false
    }

    into "discord_social_sdk"
}

def buildDir = layout.buildDirectory.get()

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    components {
        create("socialsdk4j", NativeLibrarySpec) {
            targetPlatform "x64"

            sources.cpp {
                source {
                    srcDir 'src/socialsdk4j/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
            }

            binaries.all {
                if(it instanceof StaticLibraryBinarySpec) {
                    it.buildable = false
                }

                it.tasks.configureEach {
                    it.dependsOn(socialSdkHeaders)
                }

                def jvmHome = Jvm.current().javaHome

                if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args '-I', "${jvmHome}/include"
                    cppCompiler.args '-I', "${jvmHome}/include/darwin"
                    cppCompiler.args '-mmacosx-version-min=10.13'
                    linker.args '-mmacosx-version-min=10.13'
                    linker.args '-stdlib=libc++'

                    it.tasks.configureEach {
                        it.dependsOn(socialSdkMacosReleaseBinaries)
                    }

                    cppCompiler.args "--std=c++17"
                    linker.args "-L${projectDir}/discord_social_sdk/lib/release"
                    linker.args "-ldiscord_partner_sdk"
                } else if (targetPlatform.operatingSystem.linux) {
                    cppCompiler.args '-I', "${jvmHome}/include"
                    cppCompiler.args '-I', "${jvmHome}/include/linux"
                    cppCompiler.args '-D_FILE_OFFSET_BITS=64'

                    it.tasks.configureEach {
                        it.dependsOn(socialSdkLinuxReleaseBinaries)
                    }

                    cppCompiler.args "--std=c++17"
                    linker.args "-L${projectDir}/discord_social_sdk/lib/release"
                    linker.args "-ldiscord_partner_sdk"
                } else if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "-I${jvmHome}/include"
                    cppCompiler.args "-I${jvmHome}/include/win32"

                    it.tasks.configureEach {
                        it.dependsOn(socialSdkWindowsReleaseBinaries)
                    }

                    cppCompiler.args "/std:c++17"
                    linker.args "${projectDir}/discord_social_sdk/lib/release/discord_partner_sdk.lib"
                }

                cppCompiler.args "-I${projectDir}/discord_social_sdk/include"
//                cppCompiler.args "-I${buildDir}/generated/jni-headers"
            }
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

configurations {
    artifact
}

dependencies {
    implementation platform('org.apache.logging.log4j:log4j-bom:2.24.3')
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'
    compileOnly 'org.jetbrains:annotations:26.0.2'
}

def socialSdkBinaries = tasks.register("socialSdkBinaries") {
    dependsOn(
            socialSdkLinuxReleaseBinaries, socialSdkMacosReleaseBinaries, socialSdkWindowsReleaseBinaries,
            socialSdkLinuxDebugBinaries, socialSdkMacosDebugBinaries, socialSdkWindowsDebugBinaries
    )
}

def jarSocialSdkReleaseLinuxBinaries = tasks.register("jarSocialSdkReleaseLinuxBinaries", Jar) {
    archiveClassifier = "linux"
    archiveBaseName = "socialsdk"
    dependsOn(socialSdkBinaries, socialSdkGrabLicense)

    from("discord_social_sdk/License-Notices.txt") {
        rename("License-Notices.txt", "LICENSE-DiscordSocialSdk.txt")
    }

    from("discord_social_sdk/lib/release/libdiscord_partner_sdk.so")
}

def jarSocialSdkDebugLinuxBinaries = tasks.register("jarSocialSdkDebugLinuxBinaries", Jar) {
    archiveClassifier = "linux"
    archiveBaseName = "socialsdk-debug"
    dependsOn(socialSdkBinaries, socialSdkGrabLicense)

    from("discord_social_sdk/License-Notices.txt") {
        rename("License-Notices.txt", "LICENSE-DiscordSocialSdk.txt")
    }

    from("discord_social_sdk/lib/debug/libdiscord_partner_sdk.so")
}

def jarSocialSdk4jLinuxBinaries = tasks.register("jarSocialSdk4jLinuxBinaries", Jar) {
    archiveClassifier = "linux"

    from("LICENSE.txt") {
        rename("LICENSE.txt", "LICENSE-SocialSDK4J.txt")
    }

    from(buildDir.file("libs/socialsdk4j/shared/libsocialsdk4j.so"))

    if(System.getProperty("ci") != "yes")
        dependsOn("socialsdk4jSharedLibrary")
}

def jarSocialSdkReleaseMacosBinaries = tasks.register("jarSocialSdkReleaseMacosBinaries", Jar) {
    archiveClassifier = "macos"
    archiveBaseName = "socialsdk"
    dependsOn(socialSdkBinaries, socialSdkGrabLicense)

    from("discord_social_sdk/License-Notices.txt") {
        rename("License-Notices.txt", "LICENSE-DiscordSocialSdk.txt")
    }

    from("discord_social_sdk/lib/release/libdiscord_partner_sdk.dylib")
}

def jarSocialSdkDebugMacosBinaries = tasks.register("jarSocialSdkDebugMacosBinaries", Jar) {
    archiveClassifier = "macos"
    archiveBaseName = "socialsdk-debug"
    dependsOn(socialSdkBinaries, socialSdkGrabLicense)

    from("discord_social_sdk/License-Notices.txt") {
        rename("License-Notices.txt", "LICENSE-DiscordSocialSdk.txt")
    }

    from("discord_social_sdk/lib/debug/libdiscord_partner_sdk.dylib")
}

def jarSocialSdk4jMacosBinaries = tasks.register("jarSocialSdk4jMacosBinaries", Jar) {
    archiveClassifier = "macos"

    from("LICENSE.txt") {
        rename("LICENSE.txt", "LICENSE-SocialSDK4J.txt")
    }

    from(buildDir.file("libs/socialsdk4j/shared/libsocialsdk4j.dylib"))

    if(System.getProperty("ci") != "yes")
        dependsOn("socialsdk4jSharedLibrary")
}

def jarSocialSdkReleaseWindowsBinaries = tasks.register("jarSocialSdkReleaseWindowsBinaries", Jar) {
    archiveClassifier = "windows"
    archiveBaseName = "socialsdk"
    dependsOn(socialSdkBinaries, socialSdkGrabLicense)

    from("discord_social_sdk/License-Notices.txt") {
        rename("License-Notices.txt", "LICENSE-DiscordSocialSdk.txt")
    }

    from("discord_social_sdk/bin/release/discord_partner_sdk.dll")
}

def jarSocialSdkDebugWindowsBinaries = tasks.register("jarSocialSdkDebugWindowsBinaries", Jar) {
    archiveClassifier = "windows"
    archiveBaseName = "socialsdk-debug"
    dependsOn(socialSdkBinaries, socialSdkGrabLicense)

    from("discord_social_sdk/License-Notices.txt") {
        rename("License-Notices.txt", "LICENSE-DiscordSocialSdk.txt")
    }

    from("discord_social_sdk/bin/debug/discord_partner_sdk.dll")
}

def jarSocialSdk4jWindowsBinaries = tasks.register("jarSocialSdk4jWindowsBinaries", Jar) {
    archiveClassifier = "windows"

    from("LICENSE.txt") {
        rename("LICENSE.txt", "LICENSE-SocialSDK4J.txt")
    }

    from(buildDir.file("libs/socialsdk4j/shared/socialsdk4j.dll"))

    if(System.getProperty("ci") != "yes")
        dependsOn("socialsdk4jSharedLibrary")
}

def generateNativeSourcesJar = tasks.register("generateNativeSourcesJar", Jar) {
    archiveClassifier = "native-sources"

    from("src/socialsdk4j/cpp") {
        include("*.cpp", "*.hpp")
    }
}

def generateDummyJar = tasks.register("generateDummyJar", Jar) {
    archiveClassifier = "dummy"

    from("DUMMY_README.md") {
        rename("DUMMY_README.md", "README.md")
    }
}

def discordPartnerSdkWindowsArtifact = artifacts.add('artifact', jarSocialSdkReleaseWindowsBinaries)
def discordPartnerSdkLinuxArtifact = artifacts.add('artifact', jarSocialSdkReleaseLinuxBinaries)
def discordPartnerSdkMacosArtifact = artifacts.add('artifact', jarSocialSdkReleaseMacosBinaries)

def discordPartnerSdkDebugWindowsArtifact = artifacts.add('artifact', jarSocialSdkDebugWindowsBinaries)
def discordPartnerSdkDebugLinuxArtifact = artifacts.add('artifact', jarSocialSdkDebugLinuxBinaries)
def discordPartnerSdkDebugMacosArtifact = artifacts.add('artifact', jarSocialSdkDebugMacosBinaries)

def socialSdk4jNativesWindowsArtifact = artifacts.add('artifact', jarSocialSdk4jWindowsBinaries)
def socialSdk4jNativesLinuxArtifact = artifacts.add('artifact', jarSocialSdk4jLinuxBinaries)
def socialSdk4jNativesMacosArtifact = artifacts.add('artifact', jarSocialSdk4jMacosBinaries)

def nativeSourcesJar = artifacts.add('artifact', generateNativeSourcesJar)
def dummyJar = artifacts.add('artifact', generateDummyJar)

publishing {
    publications {
        create("Maven", MavenPublication) {
            groupId = 'net.derfruhling.discord'
            artifactId = 'socialsdk4j'

            artifact(jar)
            artifact(javadocJar)
            artifact(sourcesJar)

            artifact(socialSdk4jNativesLinuxArtifact) {
                classifier = "linux"
            }

            artifact(nativeSourcesJar) {
                classifier = "linux-sources"
            }

            artifact(dummyJar) {
                classifier = "linux-javadoc"
            }

            artifact(socialSdk4jNativesMacosArtifact) {
                classifier = "macos"
            }

            artifact(nativeSourcesJar) {
                classifier = "macos-sources"
            }

            artifact(dummyJar) {
                classifier = "macos-javadoc"
            }

            artifact(socialSdk4jNativesWindowsArtifact) {
                classifier = "windows"
            }

            artifact(nativeSourcesJar) {
                classifier = "windows-sources"
            }

            artifact(dummyJar) {
                classifier = "windows-javadoc"
            }
        }

        create("SocialSDK", MavenPublication) {
            groupId = 'net.derfruhling.discord'
            artifactId = 'socialsdk'
            version = '1.2.8730'

            artifact(discordPartnerSdkLinuxArtifact) {
                classifier = "linux"
            }

            artifact(dummyJar) {
                classifier = "linux-sources"
            }

            artifact(dummyJar) {
                classifier = "linux-javadoc"
            }

            artifact(discordPartnerSdkMacosArtifact) {
                classifier = "macos"
            }

            artifact(dummyJar) {
                classifier = "macos-sources"
            }

            artifact(dummyJar) {
                classifier = "macos-javadoc"
            }

            artifact(discordPartnerSdkWindowsArtifact) {
                classifier = "windows"
            }

            artifact(dummyJar) {
                classifier = "windows-sources"
            }

            artifact(dummyJar) {
                classifier = "windows-javadoc"
            }
        }

        create("SocialSDKDebug", MavenPublication) {
            groupId = 'net.derfruhling.discord'
            artifactId = 'socialsdk-debug'
            version = '1.2.8730'

            artifact(discordPartnerSdkDebugLinuxArtifact) {
                classifier = "linux"
            }

            artifact(dummyJar) {
                classifier = "linux-sources"
            }

            artifact(dummyJar) {
                classifier = "linux-javadoc"
            }

            artifact(discordPartnerSdkDebugMacosArtifact) {
                classifier = "macos"
            }

            artifact(dummyJar) {
                classifier = "macos-sources"
            }

            artifact(dummyJar) {
                classifier = "macos-javadoc"
            }

            artifact(discordPartnerSdkDebugWindowsArtifact) {
                classifier = "windows"
            }

            artifact(dummyJar) {
                classifier = "windows-sources"
            }

            artifact(dummyJar) {
                classifier = "windows-javadoc"
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/der-fruhling-entertainment/socialsdk4j")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }

        maven {
            name = "TestDeploy"
            url = layout.buildDirectory.file("test-deploy")
        }
    }
}

tasks.test {
    useJUnitPlatform()
}
